-- phpMyAdmin SQL Dump
-- version 3.4.10.1deb1
-- http://www.phpmyadmin.net
--
-- Servidor: localhost
-- Tiempo de generación: 14-04-2014 a las 13:30:57
-- Versión del servidor: 5.5.35
-- Versión de PHP: 5.3.10-1ubuntu3.10

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Base de datos: `ehcontrol`
--

DELIMITER $$
--
-- Procedimientos
--
DROP PROCEDURE IF EXISTS `addtaskprogram`$$
CREATE DEFINER=`alex`@`localhost` PROCEDURE `addtaskprogram`( IN u VARCHAR(15), IN idta INTEGER,IN idpa INTEGER)
    COMMENT 'add an acction to a task.'
begin
	DECLARE num INTEGER DEFAULT 0;
	DECLARE ida, idu, idh INTEGER DEFAULT 0;
	DECLARE err INTEGER DEFAULT 0;
	
	SELECT COUNT(*), IFNULL(IDACTION, 0), IFNULL(USERS.IDUSER, 0) INTO num, ida, idu
	FROM PROGRAMACTIONS, USERS
	WHERE IDPROGRAM = idpa AND PROGRAMACTIONS.IDUSER = USERS.IDUSER AND USERNAME = u;
	
	CASE num 
	WHEN 1 THEN
	
		SELECT COUNT(*) INTO num
		FROM TASKS
		WHERE IDTASK = idta AND IDUSER = idu;
		
		CASE num
		WHEN 1 THEN
			SELECT COUNT(*) INTO num
			FROM TASKPROGRAM
			WHERE IDTASK = idta AND IDPROGRAM = idpa;
			
			CASE num
			WHEN 0 THEN
				INSERT INTO TASKPROGRAM (IDTASK, IDPROGRAM) VALUE (idta, idpa);
				SET err = 34;
			ELSE
				SET err = 37;
			END CASE;
		ELSE
			SET err = 32;
		END CASE;
	WHEN 0 THEN
		SET err = 33;
	ELSE
		SET err = 4;
	END CASE;
	
	SELECT IDHOUSE INTO idh
	FROM HOUSES
	JOIN ROOMS 		USING ( IDHOUSE )
	JOIN SERVICES	USING ( IDROOM )
	JOIN ACTIONS	USING ( IDSERVICE )
	WHERE IDACTION = ida;
	
	INSERT INTO HISTORYACCESS
						(IDHISTORY, IDUSER, IDHOUSE, ERROR, FUNCT, DATESTAMP        )
				VALUES  (     NULL,  idu,    idh,  IF(err = 34, 0, err),  21, CURRENT_TIMESTAMP);
				
	SELECT IF(ERRORCODE = 34, 0, ERRORCODE) AS ERROR, ENGLISH, SPANISH
	FROM ERRORS
	WHERE ERRORCODE = err;

end$$

DROP PROCEDURE IF EXISTS `createaccesshouse`$$
CREATE DEFINER=`alex`@`localhost` PROCEDURE `createaccesshouse`( IN u VARCHAR(30), IN h VARCHAR(30), IN u2 VARCHAR(30), IN n INTEGER)
    COMMENT 'Create a new house if not exist.'
begin

	DECLARE num,acc INTEGER DEFAULT 0;
	DECLARE idu, idh INTEGER DEFAULT NULL;
	DECLARE err INTEGER DEFAULT 0;

	SELECT COUNT(*), IFNULL(ACCESSNUMBER, 0), IFNULL(USERS.IDUSER, 0), IFNULL(HOUSES.IDHOUSE, 0) INTO num, acc, idu, idh
	FROM HOUSES
	JOIN ACCESSHOUSE ON (HOUSES.IDHOUSE= ACCESSHOUSE.IDHOUSE)
	JOIN USERS 		ON (USERS.IDUSER=ACCESSHOUSE.IDUSER)
	WHERE USERNAME = u AND HOUSENAME = h;
			
	CASE num 
	WHEN 1 THEN 
		CASE acc
		WHEN 1 THEN 
			SELECT COUNT(*), IDUSER INTO num, idu
			FROM USERS
			WHERE USERNAME = u2;
			IF (num <> 0) THEN 
				DELETE FROM ACCESSHOUSE WHERE IDUSER=idu AND IDHOUSE = idh;
				INSERT INTO ACCESSHOUSE (IDUSER, IDHOUSE, ACCESSNUMBER, DATEBEGIN) VALUES
										(idu,    idh, n, CURRENT_TIMESTAMP);
				SET err = 40;
			ELSE
				SET err = 3;
			END IF;
		WHEN 0 THEN
			SET err = 11;
		ELSE
			SET err = 39;
		END CASE;
	WHEN 0 THEN
		SET err = 11;
	ELSE
		SET err = 4;
	END CASE;
	
	INSERT INTO HISTORYACCESS
						(IDHISTORY, IDUSER, IDHOUSE, ERROR, FUNCT, DATESTAMP        )
				VALUES  (     NULL,    idu,   idh,  IF(err = 40, 0, err),  24, CURRENT_TIMESTAMP);
				
	SELECT IF(ERRORCODE = 40, 0, ERRORCODE) AS ERROR, ENGLISH, SPANISH
	FROM ERRORS
	WHERE ERRORCODE = err;
end$$

DROP PROCEDURE IF EXISTS `createhouse`$$
CREATE DEFINER=`alex`@`localhost` PROCEDURE `createhouse`( IN u VARCHAR(30), IN h VARCHAR(30), IN c VARCHAR(30), IN ctry VARCHAR(30))
    COMMENT 'Create a new house if not exist.'
begin

	DECLARE num INTEGER DEFAULT 0;
	DECLARE idu, idh INTEGER DEFAULT NULL;
	DECLARE err INTEGER DEFAULT 0;

	SELECT COUNT(*), IDUSER INTO num, idu
	FROM USERS
	WHERE USERNAME = u;
			
	CASE num 
	WHEN 1 THEN 
			SELECT COUNT(*), IDHOUSE INTO num, idh
			FROM HOUSES
			WHERE HOUSENAME = h;
				
			CASE num
			WHEN 0 THEN 
				INSERT INTO HOUSES  (IDHOUSE, IDUSER, HOUSENAME, IDIMAGE, CITY, COUNTRY, GPS, DATEBEGIN) VALUES
									(null, idu, h,NULL, c, ctry ,NULL,CURRENT_TIMESTAMP);
				SELECT IDHOUSE INTO idh
				FROM HOUSES
				WHERE HOUSENAME = h;
				
				INSERT INTO ACCESSHOUSE (IDUSER, IDHOUSE, ACCESSNUMBER, DATEBEGIN) VALUES
										(idu,    idh, 1, CURRENT_TIMESTAMP);
				SET err = 17;
			WHEN 1 THEN
				SET err = 22;
			ELSE
				SET err = 4;
			END CASE;
	WHEN 0 THEN
		SET err = 3;
	ELSE
		SET err = 4;
	END CASE;
	
	INSERT INTO HISTORYACCESS
						(IDHISTORY, IDUSER, IDHOUSE, ERROR, FUNCT, DATESTAMP        )
				VALUES  (     NULL,    idu,   idh,  IF(err = 17, 0, err),  7, CURRENT_TIMESTAMP);
				
	SELECT IF(ERRORCODE = 17, 0, ERRORCODE) AS ERROR, ENGLISH, SPANISH
	FROM ERRORS
	WHERE ERRORCODE = err;
end$$

DROP PROCEDURE IF EXISTS `createprogramaction`$$
CREATE DEFINER=`alex`@`localhost` PROCEDURE `createprogramaction`( IN u VARCHAR(15), IN h VARCHAR(15),IN r VARCHAR(15),IN s VARCHAR(15), IN a VARCHAR(15),IN dat VARCHAR(30), IN t timestamp, IN d timestamp)
    COMMENT 'Program an action to be done.'
begin
	DECLARE num INTEGER DEFAULT 0;
	DECLARE ida, idu, idh, ids, acc INTEGER DEFAULT 0;
	DECLARE err INTEGER DEFAULT 0;
	
	SELECT COUNT(*), IFNULL(IDACTION, 0), IFNULL(IDSERVICE, 0), IFNULL(IDHOUSE, 0) INTO num, ida, ids, idh
	FROM HOUSES 
	JOIN ROOMS 		USING ( IDHOUSE ) 
	JOIN SERVICES	USING ( IDROOM ) 
	JOIN ACTIONS	USING ( IDSERVICE ) 
	WHERE HOUSENAME = h AND ROOMNAME = r AND SERVICENAME = s AND ACTIONNAME = a; 
	
	CASE num  
	WHEN 1 THEN  
		begin 
			DECLARE num INTEGER DEFAULT 0;
			SELECT COUNT(*), IFNULL(USERS.IDUSER, 0), IFNULL(ACCESSNUMBER, 0) INTO num, idu, acc 
			FROM USERS,  ACCESSHOUSE
						WHERE USERNAME = u 
						AND USERS.IDUSER = ACCESSHOUSE.IDUSER 
						AND ACCESSHOUSE.IDHOUSE = idh ;
			
			CASE num
			WHEN 1 THEN 
				CASE acc
				WHEN 1 THEN
					INSERT INTO `PROGRAMACTIONS` (`IDPROGRAM`, `IDUSER`, `IDACTION`, `DATA`, `STARTTIME`, `DATEBEGIN`) VALUES (NULL, idu, ida, dat, t, d);
					SET err = 27;
				ELSE
					SELECT COUNT(*), IFNULL(PERMISSIONNUMBER, 0) INTO num, acc 
					FROM PERMISSIONS
						WHERE IDUSER = idu 
							AND IDSERVICE= ids ;
					
					CASE acc
					WHEN 1 THEN
						INSERT INTO `PROGRAMACTIONS` (`IDPROGRAM`, `IDUSER`, `IDACTION`, `DATA`, `STARTTIME`, `DATEBEGIN`) VALUES (NULL, idu, ida, dat, t, d);
						SET err = 27;
					ELSE
						SET err = 10;
					END CASE;
				END CASE;

			WHEN 0 THEN
				SET err = 11; 
			ELSE
				SET err = 4;
			END CASE;
		end;
	WHEN 0 THEN
		SET err = 21;
	ELSE
		SET err = 4;
	END CASE;

	SELECT IFNULL(IDHOUSE, 0) INTO  idh
	FROM HOUSES
	WHERE HOUSENAME = h;

	INSERT INTO HISTORYACCESS
						(IDHISTORY, IDUSER, IDHOUSE, ERROR, FUNCT, DATESTAMP        )
				VALUES  (     NULL,  idu,    idh,  IF(err = 27, 0, err),  14, CURRENT_TIMESTAMP);
				
	SELECT IF(ERRORCODE = 27, 0, ERRORCODE) AS ERROR, ENGLISH, SPANISH
	FROM ERRORS
	WHERE ERRORCODE = err;

end$$

DROP PROCEDURE IF EXISTS `createroom`$$
CREATE DEFINER=`alex`@`localhost` PROCEDURE `createroom`( IN u VARCHAR(30), IN h VARCHAR(30), IN r VARCHAR(30))
    COMMENT 'Create a new room if not exist.'
begin

	DECLARE num, acc INTEGER DEFAULT 0;
	DECLARE idu, idh, idr INTEGER DEFAULT NULL;
	DECLARE err INTEGER DEFAULT 0;

	SELECT COUNT(*), IFNULL(ACCESSNUMBER, 0), USERS.IDUSER, HOUSES.IDHOUSE INTO num, acc, idu, idh
	FROM HOUSES
	JOIN ACCESSHOUSE ON (HOUSES.IDHOUSE= ACCESSHOUSE.IDHOUSE)
	JOIN USERS 		ON (USERS.IDUSER=ACCESSHOUSE.IDUSER)
	WHERE USERNAME = u AND HOUSENAME = h;
			
	CASE num 
	WHEN 1 THEN 
		CASE acc
		WHEN 1 THEN 
			SELECT COUNT(*) INTO num
			FROM ROOMS
			WHERE ROOMNAME = r AND IDHOUSE = idh;
				
			CASE num
			WHEN 0 THEN 
				INSERT INTO ROOMS  (IDROOM, IDHOUSE, IDUSER, ROOMNAME, DATEBEGIN) VALUES
									(null, idh, idu, r, CURRENT_TIMESTAMP);
				SET err = 44;
			WHEN 1 THEN
				SET err = 43;
			ELSE
				SET err = 4;
			END CASE;
		WHEN 0 THEN
			SET err = 11;
		ELSE
			SET err = 39;
		END CASE;
			
	WHEN 0 THEN
		SET err = 11;
	ELSE
		SET err = 4;
	END CASE;
	
	INSERT INTO HISTORYACCESS
						(IDHISTORY, IDUSER, IDHOUSE, ERROR, FUNCT, DATESTAMP        )
				VALUES  (     NULL,    idu,   idh,  IF(err = 44, 0, err),  17, CURRENT_TIMESTAMP);
				
	SELECT IF(ERRORCODE = 44, 0, ERRORCODE) AS ERROR, ENGLISH, SPANISH
	FROM ERRORS
	WHERE ERRORCODE = err;
end$$

DROP PROCEDURE IF EXISTS `createtask`$$
CREATE DEFINER=`alex`@`localhost` PROCEDURE `createtask`( IN u VARCHAR(15), IN ta VARCHAR(15),IN des VARCHAR(50),IN fre timestamp)
    COMMENT 'Create a task, will group programaction.'
begin
	DECLARE num INTEGER DEFAULT 0;
	DECLARE idu INTEGER DEFAULT 0;
	DECLARE err INTEGER DEFAULT 0;
	
	SELECT COUNT(*), IFNULL(IDUSER, 0) INTO num, idu
	FROM USERS
	WHERE USERNAME = u;
	
	CASE num 
	WHEN 1 THEN 
		SELECT COUNT(*) INTO num
		FROM TASKS
		WHERE IDUSER = idu AND TASKNAME = ta;
		
		CASE num 
		WHEN 0 THEN 
			INSERT INTO `TASKS` (`IDTASK`, `TASKNAME`, `IDUSER`, `DESCRIPTION`, ` FREQUENCY`, `DATEBEGIN`) 
					VALUES	(NULL, ta, idu, des, fre, CURRENT_TIMESTAMP);
			SET err = 29;
		WHEN 1 THEN 
			SET err = 24;
		ELSE
			SET err = 4;
		END CASE;
	WHEN 0 THEN
		SET err = 3;
	ELSE
		SET err = 4;
	END CASE;

	INSERT INTO HISTORYACCESS
						(IDHISTORY, IDUSER, IDHOUSE, ERROR, FUNCT, DATESTAMP        )
				VALUES  (     NULL,  idu,    null,  IF(err = 29, 0, err),  11, CURRENT_TIMESTAMP);
				
	SELECT IF(ERRORCODE = 29, 0, ERRORCODE) AS ERROR, ENGLISH, SPANISH
	FROM ERRORS
	WHERE ERRORCODE = err;

end$$

DROP PROCEDURE IF EXISTS `createuser`$$
CREATE DEFINER=`alex`@`localhost` PROCEDURE `createuser`( IN u VARCHAR(15), IN p VARCHAR(40), IN mail VARCHAR(40), h VARCHAR(30))
    COMMENT 'Create a new user if not exist.'
begin

	DECLARE num INTEGER DEFAULT 0;
	DECLARE id INTEGER DEFAULT 0;
	DECLARE err INTEGER DEFAULT 0;

        SELECT COUNT(*), IFNULL(IDUSER, 0) INTO num, id
	FROM USERS
	WHERE USERNAME = u;
			
	CASE num 
	WHEN 0 THEN 
		begin
			DECLARE num INTEGER DEFAULT 0;
			SELECT COUNT(*) INTO num
			FROM USERS
			WHERE EMAIL = mail ;
			CASE num
			WHEN 0 THEN 
				INSERT INTO `USERS` (`IDUSER`, `USERNAME`, `PASSWORD`, `EMAIL`, `HINT`, `DATEBEGIN`) VALUES
									(NULL, u, p, mail, h, CURRENT_TIMESTAMP);

                               SELECT IFNULL(IDUSER, 0) INTO  id
	                       FROM USERS
	                       WHERE USERNAME = u;

				SET err = 13;
			WHEN 1 THEN

                               SELECT IFNULL(IDUSER, 0) INTO  id
	                       FROM USERS
	                       WHERE EMAIL = mail;

				SET err = 7; 
			ELSE
				SET err = 4;
			END CASE;
		end;
	WHEN 1 THEN
		SET err = 6;
	ELSE
		SET err = 4;
	END CASE;

	SELECT IFNULL(IDUSER, 0) INTO  id
	FROM USERS
	WHERE USERNAME = u;

	INSERT INTO HISTORYACCESS
						(IDHISTORY, IDUSER, IDHOUSE, ERROR, FUNCT, DATESTAMP        )
				VALUES  (     NULL,  id,    NULL,  IF(err = 13, 0, err),  3, CURRENT_TIMESTAMP);
				
	SELECT IF(ERRORCODE = 13, 0, ERRORCODE) AS ERROR, ENGLISH, SPANISH
	FROM ERRORS
	WHERE ERRORCODE = err;
end$$

DROP PROCEDURE IF EXISTS `deleteaccesshouse`$$
CREATE DEFINER=`alex`@`localhost` PROCEDURE `deleteaccesshouse`( IN u VARCHAR(30), IN h VARCHAR(30), IN u2 VARCHAR(30))
    COMMENT 'Delete the access to a house of a user.'
begin

	DECLARE num,acc INTEGER DEFAULT 0;
	DECLARE idu, idh INTEGER DEFAULT NULL;
	DECLARE err INTEGER DEFAULT 0;

	SELECT COUNT(*), IFNULL(ACCESSNUMBER, 0), IFNULL(USERS.IDUSER, 0), IFNULL(HOUSES.IDHOUSE, 0) INTO num, acc, idu, idh
	FROM HOUSES
	JOIN ACCESSHOUSE ON (HOUSES.IDHOUSE= ACCESSHOUSE.IDHOUSE)
	JOIN USERS 		ON (USERS.IDUSER=ACCESSHOUSE.IDUSER)
	WHERE USERNAME = u AND HOUSENAME = h;
			
	CASE num 
	WHEN 1 THEN 
		CASE acc
		WHEN 1 THEN 
			SELECT COUNT(*), IDUSER INTO num, idu
			FROM USERS
			WHERE USERNAME = u2;
			IF (num <> 0) THEN 
				DELETE FROM ACCESSHOUSE WHERE IDUSER=idu AND IDHOUSE = idh;
				SET err = 41;
			ELSE
				SET err = 3;
			END IF;
		WHEN 0 THEN
			SET err = 11;
		ELSE
			SET err = 39;
		END CASE;
	WHEN 0 THEN
		SET err = 11;
	ELSE
		SET err = 4;
	END CASE;
	
	INSERT INTO HISTORYACCESS
						(IDHISTORY, IDUSER, IDHOUSE, ERROR, FUNCT, DATESTAMP        )
				VALUES  (     NULL,    idu,   idh,  IF(err = 41, 0, err),  24, CURRENT_TIMESTAMP);
				
	SELECT IF(ERRORCODE = 41, 0, ERRORCODE) AS ERROR, ENGLISH, SPANISH
	FROM ERRORS
	WHERE ERRORCODE = err;
end$$

DROP PROCEDURE IF EXISTS `deletehouse`$$
CREATE DEFINER=`alex`@`localhost` PROCEDURE `deletehouse`( IN u VARCHAR(30),IN p VARCHAR(40), IN h VARCHAR(30))
    COMMENT 'Create a new house if not exist.'
begin

	DECLARE num, acc INTEGER DEFAULT 0;
	DECLARE idu, idh INTEGER DEFAULT NULL;  
	DECLARE err INTEGER DEFAULT 0; 
	DECLARE pass VARCHAR(40); 

	SELECT COUNT(*), IFNULL(ACCESSNUMBER, 0), IFNULL(USERS.IDUSER, 0), IFNULL(HOUSES.IDHOUSE, 0), IFNULL(PASSWORD,0) INTO num, acc, idu, idh, pass
	FROM HOUSES 
	JOIN ACCESSHOUSE ON (HOUSES.IDHOUSE= ACCESSHOUSE.IDHOUSE)
	JOIN USERS 		ON (USERS.IDUSER=ACCESSHOUSE.IDUSER) 
	WHERE USERNAME = u AND HOUSENAME = h;
			 
	CASE num 
	WHEN 1 THEN 
		CASE acc
		WHEN 1 THEN 
			IF (pass = p) THEN
				DELETE FROM HOUSES WHERE IDHOUSE= idh;
				SET err = 19;
			ELSE
				SET err = 2;
			END IF;
		WHEN 0 THEN
			SET err = 11;
		ELSE
			SET err = 39;
		END CASE;
	WHEN 0 THEN
		SET err = 11;
	ELSE
		SET err = 4;
	END CASE;
	
	INSERT INTO HISTORYACCESS
						(IDHISTORY, IDUSER, IDHOUSE, ERROR, FUNCT, DATESTAMP        )
				VALUES  (     NULL,    idu,   idh,  IF(err = 19, 0, err),  9, CURRENT_TIMESTAMP);
				
	SELECT IF(ERRORCODE = 19, 0, ERRORCODE) AS ERROR, ENGLISH, SPANISH
	FROM ERRORS
	WHERE ERRORCODE = err;
end$$

DROP PROCEDURE IF EXISTS `deleteprogramaction`$$
CREATE DEFINER=`alex`@`localhost` PROCEDURE `deleteprogramaction`( IN u VARCHAR(15), IN idpa INTEGER)
    COMMENT 'Delete program action.'
begin
	DECLARE num INTEGER DEFAULT 0;
	DECLARE ida, idu, idh, acc, per INTEGER DEFAULT 0;
	DECLARE err INTEGER DEFAULT 0;
	
	SELECT COUNT(*), IFNULL(IDACTION, 0) INTO num, ida
	FROM PROGRAMACTIONS
	WHERE IDPROGRAM = idpa ;
	
	CASE num 
	WHEN 1 THEN
		SELECT COUNT(*), IFNULL(ACCESSNUMBER, 0), IFNULL(USERS.IDUSER, 0), IFNULL(HOUSES.IDHOUSE, 0) INTO num, acc, idu, idh
		FROM HOUSES
		JOIN ROOMS 		USING ( IDHOUSE )
		JOIN SERVICES	USING ( IDROOM )
		JOIN ACTIONS	USING ( IDSERVICE )
		JOIN ACCESSHOUSE ON (HOUSES.IDHOUSE= ACCESSHOUSE.IDHOUSE)
		JOIN USERS 		ON (USERS.IDUSER=ACCESSHOUSE.IDUSER)
		WHERE IDACTION = ida AND USERNAME = u;
	
		CASE num
		WHEN 1 THEN
			CASE acc
			WHEN 1 THEN 
				DELETE FROM TASKPROGRAM WHERE IDPROGRAM= idpa;
				DELETE FROM PROGRAMACTIONS WHERE IDPROGRAM= idpa;
				SET err = 28;
			WHEN 0 THEN
				SET err = 11;
			ELSE
				SELECT COUNT(*), IFNULL(PERMISSIONNUMBER, 0) INTO num, per
				FROM USERS 
				JOIN PERMISSIONS USING (IDUSER)
				JOIN ACTIONS	USING ( IDSERVICE )
				WHERE IDACTION = ida AND USERNAME=u;
				
				CASE num
				WHEN 1 THEN
					CASE per
					WHEN 1 THEN
						DELETE FROM TASKPROGRAM WHERE IDPROGRAM= idpa;
						DELETE FROM PROGRAMACTIONS WHERE IDPROGRAM= idpa;
						SET err = 28;
					ELSE
						SET err = 10;
					END CASE;
				ELSE
					SET err = 10;
				END CASE;
			END CASE;
		ELSE
			SET err = 11;
		END CASE;
	ELSE 
		SET err = 21;
	END CASE;
	

	INSERT INTO HISTORYACCESS
						(IDHISTORY, IDUSER, IDHOUSE, ERROR, FUNCT, DATESTAMP        )
				VALUES  (     NULL,  idu,    idh,  IF(err = 28, 0, err),  15, CURRENT_TIMESTAMP);
				
	SELECT IF(ERRORCODE = 28, 0, ERRORCODE) AS ERROR, ENGLISH, SPANISH
	FROM ERRORS
	WHERE ERRORCODE = err;

end$$

DROP PROCEDURE IF EXISTS `deleteroom`$$
CREATE DEFINER=`alex`@`localhost` PROCEDURE `deleteroom`( IN u VARCHAR(30),IN p VARCHAR(30), IN h VARCHAR(30), IN r VARCHAR(30))
    COMMENT 'Delete a room if exist.'
begin

	DECLARE num, acc INTEGER DEFAULT 0;
	DECLARE idu, idh, idr INTEGER DEFAULT NULL;  
	DECLARE err INTEGER DEFAULT 0; 
	DECLARE pass VARCHAR(40); 

	SELECT COUNT(*), IFNULL(ACCESSNUMBER, 0), USERS.IDUSER, HOUSES.IDHOUSE, IFNULL(ROOMS.IDROOM, 0), IFNULL(PASSWORD,0) INTO num, acc, idu, idh, idr, pass
	FROM HOUSES 
	JOIN ACCESSHOUSE ON (HOUSES.IDHOUSE= ACCESSHOUSE.IDHOUSE)
	JOIN USERS 		ON (USERS.IDUSER=ACCESSHOUSE.IDUSER) 
	JOIN ROOMS		ON (HOUSES.IDHOUSE = ROOMS.IDHOUSE)
	WHERE USERNAME = u AND HOUSENAME = h AND ROOMNAME = r;
			 
	CASE num 
	WHEN 1 THEN 
		CASE acc
		WHEN 1 THEN 
			IF (pass = p) THEN
				DELETE FROM ROOMS WHERE IDROOM = idr;
				SET err = 45;
			ELSE
				SET err = 2;
			END IF;
		WHEN 0 THEN
			SET err = 11;
		ELSE
			SET err = 39;
		END CASE;
	WHEN 0 THEN
		SET err = 46;
	ELSE
		SET err = 4;
	END CASE;
	
	INSERT INTO HISTORYACCESS
						(IDHISTORY, IDUSER, IDHOUSE, ERROR, FUNCT, DATESTAMP        )
				VALUES  (     NULL,    idu,   idh,  IF(err = 45, 0, err),  18, CURRENT_TIMESTAMP);
				
	SELECT IF(ERRORCODE = 45, 0, ERRORCODE) AS ERROR, ENGLISH, SPANISH
	FROM ERRORS
	WHERE ERRORCODE = err;
end$$

DROP PROCEDURE IF EXISTS `deletetask`$$
CREATE DEFINER=`alex`@`localhost` PROCEDURE `deletetask`( IN u VARCHAR(15), IN ta VARCHAR(15))
    COMMENT 'Delete a user task.'
begin
	DECLARE num INTEGER DEFAULT 0;
	DECLARE idu, idta INTEGER DEFAULT 0;
	DECLARE err INTEGER DEFAULT 0;
	
	SELECT COUNT(*), IFNULL(IDUSER, 0) INTO num, idu
	FROM USERS
	WHERE USERNAME = u;
	
	CASE num 
	WHEN 1 THEN 
		SELECT COUNT(*), IFNULL(IDTASK, 0) INTO num, idta
		FROM TASKS
		WHERE IDUSER = idu AND TASKNAME = ta;
		
		CASE num 
		WHEN 1 THEN 
			DELETE FROM TASKPROGRAM WHERE IDTASK = idta;
			DELETE FROM TASKS WHERE IDTASK = idta;
			SET err = 30;
		WHEN 0 THEN 
			SET err = 31;
		ELSE
			SET err = 4;
		END CASE;
	WHEN 0 THEN
		SET err = 3;
	ELSE
		SET err = 4;
	END CASE;

	INSERT INTO HISTORYACCESS
						(IDHISTORY, IDUSER, IDHOUSE, ERROR, FUNCT, DATESTAMP        )
				VALUES  (     NULL,  idu,    null,  IF(err = 30, 0, err),  12, CURRENT_TIMESTAMP);
				
	SELECT IF(ERRORCODE = 30, 0, ERRORCODE) AS ERROR, ENGLISH, SPANISH
	FROM ERRORS
	WHERE ERRORCODE = err;

end$$

DROP PROCEDURE IF EXISTS `deleteuser`$$
CREATE DEFINER=`alex`@`localhost` PROCEDURE `deleteuser`( IN u VARCHAR(15), IN p VARCHAR(40))
    COMMENT 'Delete user if posible by deleting all information restring.'
begin

	DECLARE num INTEGER DEFAULT 0;
	DECLARE id INTEGER DEFAULT 0;
	DECLARE err INTEGER DEFAULT 0;
	DECLARE pass VARCHAR(40);

	
	SELECT COUNT(*), IFNULL(IDUSER,0), IFNULL(PASSWORD,0) INTO num , id, pass
	FROM USERS
	WHERE USERNAME = u;
			
	CASE num 
	WHEN 1 THEN 
			IF (pass = p) THEN 
				DELETE FROM `ACCESSHOUSE` WHERE IDUSER = id;
				DELETE FROM `PERMISSIONS` WHERE IDUSER = id;
				DELETE FROM `TASKS` WHERE IDUSER = id;
				DELETE FROM `USERS` WHERE IDUSER = id;
				SET err = 14;
			ELSE 
				SET err = 2;
			END IF;
	WHEN 0 THEN
		SET err = 3;
	ELSE
		SET err = 4;
	END CASE;

	INSERT INTO HISTORYACCESS
						(IDHISTORY, IDUSER, IDHOUSE, ERROR, FUNCT, DATESTAMP        )
				VALUES  (     NULL,   id,    NULL,  IF(err = 14, 0, err),  4, CURRENT_TIMESTAMP);
				
	SELECT IF(ERRORCODE = 14, 0, ERRORCODE) AS ERROR, ENGLISH, SPANISH, p, pass
	FROM ERRORS
	WHERE ERRORCODE = err;

end$$

DROP PROCEDURE IF EXISTS `loginJSON`$$
CREATE DEFINER=`alex`@`localhost` PROCEDURE `loginJSON`( in u VARCHAR(15))
begin

SELECT *
	FROM  loginVIEW
	WHERE USERNAME = u ;

end$$

DROP PROCEDURE IF EXISTS `modifyhouse`$$
CREATE DEFINER=`alex`@`localhost` PROCEDURE `modifyhouse`( IN u VARCHAR(30), IN h VARCHAR(30), IN n_h VARCHAR(30), IN idim INTEGER, IN c VARCHAR(30), IN ctry VARCHAR(30))
    COMMENT 'Modify house information.'
begin

	DECLARE num, acc INTEGER DEFAULT 0;
	DECLARE idu, idh INTEGER DEFAULT NULL;
	DECLARE err INTEGER DEFAULT 0;

	SELECT COUNT(*), IFNULL(ACCESSNUMBER, 0), USERS.IDUSER, HOUSES.IDHOUSE INTO num, acc, idu, idh
	FROM HOUSES
	JOIN ACCESSHOUSE ON (HOUSES.IDHOUSE= ACCESSHOUSE.IDHOUSE)
	JOIN USERS 		ON (USERS.IDUSER=ACCESSHOUSE.IDUSER)
	WHERE USERNAME = u AND HOUSENAME = h;
			
	CASE num 
	WHEN 1 THEN 
		CASE acc
		WHEN 1 THEN 
			UPDATE HOUSES SET HOUSENAME=n_h, IDIMAGE=idim, CITY=c, COUNTRY=ctry WHERE IDHOUSE = idh;
			SET err = 42;
		WHEN 0 THEN
			SET err = 11;
		ELSE
			SET err = 39;
		END CASE;
	WHEN 0 THEN
		SET err = 11;
	ELSE
		SET err = 4;
	END CASE;
	
	INSERT INTO HISTORYACCESS
						(IDHISTORY, IDUSER, IDHOUSE, ERROR, FUNCT, DATESTAMP        )
				VALUES  (     NULL,    idu,   idh,  IF(err = 42, 0, err),  20, CURRENT_TIMESTAMP);
				
	SELECT IF(ERRORCODE = 42, 0, ERRORCODE) AS ERROR, ENGLISH, SPANISH
	FROM ERRORS
	WHERE ERRORCODE = err;
end$$

DROP PROCEDURE IF EXISTS `modifyuser`$$
CREATE DEFINER=`alex`@`localhost` PROCEDURE `modifyuser`( IN u VARCHAR(15), IN p VARCHAR(40), IN n_u VARCHAR(15), IN n_p VARCHAR(40), IN n_mail VARCHAR(40), n_h VARCHAR(30))
    COMMENT 'Mdify the especcification of an existing user.'
begin

	DECLARE num INTEGER DEFAULT 0;
	DECLARE id INTEGER DEFAULT 0;
	DECLARE pass VARCHAR(40);
	DECLARE err INTEGER DEFAULT 0;

	SELECT COUNT(*), IFNULL(IDUSER, 0), IFNULL(PASSWORD, 0) INTO num, id, pass
	FROM USERS
	WHERE USERNAME = u;
			
	CASE num 
	WHEN 1 THEN 
		IF (pass = p) THEN 
			begin 
				DECLARE num INTEGER DEFAULT 0;

				SELECT COUNT(*) INTO num
				FROM USERS
				WHERE USERNAME = n_u AND IDUSER <> id;
						
				CASE num 
				WHEN 0 THEN 
					begin
						DECLARE num INTEGER DEFAULT 0;
						SELECT COUNT(*) INTO num
						FROM USERS
						WHERE EMAIL = n_mail AND IDUSER <> id;
						CASE num
						WHEN 0 THEN 
							UPDATE USERS SET USERNAME=n_u, PASSWORD=n_p, EMAIL=n_mail, HINT=n_h
								WHERE IDUSER = id;
							SET err = 15;
						WHEN 1 THEN
							SET err = 7; 
						ELSE
							SET err = 4;
						END CASE;
					end;
				WHEN 1 THEN
					SET err = 6;
				ELSE
					SET err = 4;
				END CASE;
				
			end;
		ELSE 
			SET err = 2;
		END IF;
	WHEN 0 THEN
		SET err = 3;
	ELSE
		SET err = 4;
	END CASE;

	INSERT INTO HISTORYACCESS
						(IDHISTORY, IDUSER, IDHOUSE, ERROR, FUNCT, DATESTAMP        )
				VALUES  (     NULL,   id,    NULL,  IF(err = 15, 0, err),  5, CURRENT_TIMESTAMP);
				
	SELECT IF(ERRORCODE = 15, 0, ERRORCODE) AS ERROR, ENGLISH, SPANISH
	FROM ERRORS
	WHERE ERRORCODE = err;

end$$

DROP PROCEDURE IF EXISTS `ProG`$$
CREATE DEFINER=`alex`@`localhost` PROCEDURE `ProG`()
begin 
SELECT * FROM USERS;
end$$

DROP PROCEDURE IF EXISTS `removetaskprogram`$$
CREATE DEFINER=`alex`@`localhost` PROCEDURE `removetaskprogram`( IN u VARCHAR(15), IN idta INTEGER,IN idpa INTEGER)
    COMMENT 'add an acction to a task.'
begin
	DECLARE num INTEGER DEFAULT 0;
	DECLARE ida, idu, idh INTEGER DEFAULT 0;
	DECLARE err INTEGER DEFAULT 0;
	
	SELECT COUNT(*), IFNULL(IDACTION, 0), IFNULL(USERS.IDUSER, 0) INTO num, ida, idu
	FROM PROGRAMACTIONS, USERS
	WHERE IDPROGRAM = idpa AND PROGRAMACTIONS.IDUSER = USERS.IDUSER AND USERNAME = u;
	
	CASE num 
	WHEN 1 THEN
	
		SELECT COUNT(*) INTO num
		FROM TASKS
		WHERE IDTASK = idta AND IDUSER = idu;
		
		CASE num
		WHEN 1 THEN
			SELECT COUNT(*) INTO num
			FROM TASKPROGRAM
			WHERE IDTASK = idta AND IDPROGRAM = idpa;
			
			CASE num
			WHEN 1 THEN
				DELETE FROM TASKPROGRAM WHERE IDTASK = idta;
				SET err = 35;
			ELSE
				SET err = 36;
			END CASE;
		ELSE
			SET err = 32;
		END CASE;
	WHEN 0 THEN
		SET err = 33;
	ELSE
		SET err = 4;
	END CASE;
	
	SELECT IDHOUSE INTO idh
	FROM HOUSES
	JOIN ROOMS 		USING ( IDHOUSE )
	JOIN SERVICES	USING ( IDROOM )
	JOIN ACTIONS	USING ( IDSERVICE )
	WHERE IDACTION = ida;
	
	INSERT INTO HISTORYACCESS
						(IDHISTORY, IDUSER, IDHOUSE, ERROR, FUNCT, DATESTAMP        )
				VALUES  (     NULL,  idu,    idh,  IF(err = 35, 0, err),  22, CURRENT_TIMESTAMP);
				
	SELECT IF(ERRORCODE = 35, 0, ERRORCODE) AS ERROR, ENGLISH, SPANISH
	FROM ERRORS
	WHERE ERRORCODE = err;

end$$

DROP PROCEDURE IF EXISTS `schedule`$$
CREATE DEFINER=`alex`@`localhost` PROCEDURE `schedule`( IN h VARCHAR(15))
    COMMENT 'Request for all task afected to a house, by a user.'
begin

		SELECT *
	FROM ACTIONS, PROGRAMACTIONS
	LEFT JOIN (TASKPROGRAM, TASKS) ON (  TASKPROGRAM.IDPROGRAM = PROGRAMACTIONS.IDPROGRAM
										AND TASKPROGRAM.IDTASK = TASKS.IDTASK )
	JOIN SERVICES
	JOIN ROOMS 	ON ( ROOMS.IDROOM = SERVICES.IDROOM )
	JOIN HOUSES ON ( HOUSES.IDHOUSE = ROOMS.IDHOUSE )
	WHERE 	ACTIONS.IDACTION = PROGRAMACTIONS.IDACTION
		AND SERVICES.IDSERVICE = ACTIONS.IDSERVICE
		AND HOUSES.HOUSENAME = h
	ORDER BY TASKNAME DESC, PROGRAMACTIONS.IDPROGRAM ASC;

end$$

DROP PROCEDURE IF EXISTS `selectiduser`$$
CREATE DEFINER=`alex`@`localhost` PROCEDURE `selectiduser`( in u VARCHAR(20), out id integer)
BEGIN
DECLARE idu INTEGER;
SELECT IDUSER into idu FROM USERS WHERE USERNAME=u;
set id = idu;
END$$

DROP PROCEDURE IF EXISTS `streaminghour`$$
CREATE DEFINER=`alex`@`localhost` PROCEDURE `streaminghour`(ini TIMESTAMP, p INT)
BEGIN
DROP  TABLE IF EXISTS STADISTICS  ;
CREATE TABLE STADISTICS SELECT COUNT(*) AS Y, X
FROM (SELECT TRUNC_N_MINUTES(DATESTAMP, 60/p) AS X
		FROM HISTORYACCESS 
		WHERE DATESTAMP>= ini)AS T
GROUP BY X
ORDER BY X; 
END$$

DROP PROCEDURE IF EXISTS `userexist`$$
CREATE DEFINER=`alex`@`localhost` PROCEDURE `userexist`(u VARCHAR(15), p VARCHAR(40), error INTEGER)
BEGIN 
declare pass varchar(40);
SELECT PASSWORD INTO pass FROM USERS WHERE USERNAME=u;
IF (pass <> p) THEN 
  set error = 2;
ELSE 
SET error = 0;
END IF;



END$$

--
-- Funciones
--
DROP FUNCTION IF EXISTS `ROUND_HOUR`$$
CREATE DEFINER=`alex`@`localhost` FUNCTION `ROUND_HOUR`(datestamp DATETIME) RETURNS datetime
    NO SQL
    DETERMINISTIC
    COMMENT 'returns nearest hour'
RETURN DATE_FORMAT(datestamp + INTERVAL 30 MINUTE, '%Y-%m-%d %H:00')$$

DROP FUNCTION IF EXISTS `TRUNC_N_HOURS`$$
CREATE DEFINER=`alex`@`localhost` FUNCTION `TRUNC_N_HOURS`(datestamp DATETIME, n INT) RETURNS datetime
    NO SQL
    DETERMINISTIC
    COMMENT 'truncate to N hour boundary. For example,\n           TRUNCATE_N_HOURS(sometime, 12) gives the nearest\n           preceding half-day (noon, or midnight'
RETURN DATE(datestamp) +
                INTERVAL (HOUR(datestamp) -
                          HOUR(datestamp) MOD n) HOUR$$

DROP FUNCTION IF EXISTS `TRUNC_N_MINUTES`$$
CREATE DEFINER=`alex`@`localhost` FUNCTION `TRUNC_N_MINUTES`(datestamp DATETIME, n INT) RETURNS datetime
    NO SQL
    DETERMINISTIC
    COMMENT 'truncate to N minute boundary. For example,\n           TRUNCATE_N_MINUTES(sometime, 15) gives the nearest\n           preceding quarter hour'
RETURN DATE_FORMAT(datestamp,'%Y-%m-%d %H:00') +
                INTERVAL (MINUTE(datestamp) -
                          MINUTE(datestamp) MOD n) MINUTE$$

DELIMITER ;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `ACCESSHOUSE`
--
-- Creación: 13-04-2014 a las 22:59:04
--

DROP TABLE IF EXISTS `ACCESSHOUSE`;
CREATE TABLE IF NOT EXISTS `ACCESSHOUSE` (
  `IDUSER` int(11) NOT NULL DEFAULT '0',
  `IDHOUSE` int(11) NOT NULL DEFAULT '0',
  `ACCESSNUMBER` int(11) DEFAULT '1',
  `DATEBEGIN` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`IDUSER`,`IDHOUSE`),
  KEY `IDHOUSE` (`IDHOUSE`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- RELACIONES PARA LA TABLA `ACCESSHOUSE`:
--   `IDHOUSE`
--       `HOUSES` -> `IDHOUSE`
--   `IDUSER`
--       `USERS` -> `IDUSER`
--

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `ACTIONMESSAGES`
--
-- Creación: 12-04-2014 a las 14:42:07
--

DROP TABLE IF EXISTS `ACTIONMESSAGES`;
CREATE TABLE IF NOT EXISTS `ACTIONMESSAGES` (
  `IDMESSAGE` int(11) NOT NULL AUTO_INCREMENT,
  `IDACTION` int(11) NOT NULL,
  `RETURNCODE` varchar(20) NOT NULL,
  `EXIT` tinyint(1) NOT NULL,
  `ENGLISH` varchar(50) DEFAULT NULL,
  `SPANISH` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`IDMESSAGE`),
  UNIQUE KEY `IDACTION_RETURNCODE` (`IDACTION`,`RETURNCODE`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=22 ;

--
-- RELACIONES PARA LA TABLA `ACTIONMESSAGES`:
--   `IDACTION`
--       `ACTIONS` -> `IDACTION`
--

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `ACTIONS`
--
-- Creación: 12-04-2014 a las 14:42:08
--

DROP TABLE IF EXISTS `ACTIONS`;
CREATE TABLE IF NOT EXISTS `ACTIONS` (
  `IDACTION` int(11) NOT NULL AUTO_INCREMENT,
  `IDSERVICE` int(11) DEFAULT NULL,
  `ACTIONNAME` varchar(10) NOT NULL,
  `ENGLISH` varchar(50) NOT NULL,
  `SPANISH` varchar(50) NOT NULL,
  `FCODE` varchar(20) NOT NULL,
  PRIMARY KEY (`IDACTION`),
  UNIQUE KEY `UNQ_ACTIONKEY` (`IDSERVICE`,`ACTIONNAME`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=93 ;

--
-- RELACIONES PARA LA TABLA `ACTIONS`:
--   `IDSERVICE`
--       `SERVICES` -> `IDSERVICE`
--

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `COMMANDS`
--
-- Creación: 12-04-2014 a las 14:42:08
--

DROP TABLE IF EXISTS `COMMANDS`;
CREATE TABLE IF NOT EXISTS `COMMANDS` (
  `IDCOMMMAND` int(11) NOT NULL AUTO_INCREMENT,
  `COMMANDNAME` varchar(15) NOT NULL,
  `IDUSER` int(11) NOT NULL,
  PRIMARY KEY (`IDCOMMMAND`),
  KEY `IDUSER` (`IDUSER`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=2 ;

--
-- RELACIONES PARA LA TABLA `COMMANDS`:
--   `IDUSER`
--       `USERS` -> `IDUSER`
--

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `COMMAND_PROGRAM`
--
-- Creación: 13-04-2014 a las 12:57:03
--

DROP TABLE IF EXISTS `COMMAND_PROGRAM`;
CREATE TABLE IF NOT EXISTS `COMMAND_PROGRAM` (
  `IDCOMMAND` int(11) NOT NULL,
  `IDPROGRAM` int(11) NOT NULL,
  `POS` int(11) NOT NULL,
  KEY `IDCOMMAND` (`IDCOMMAND`),
  KEY `IDPROGRAM` (`IDPROGRAM`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- RELACIONES PARA LA TABLA `COMMAND_PROGRAM`:
--   `IDPROGRAM`
--       `PROGRAMACTIONS` -> `IDPROGRAM`
--   `IDCOMMAND`
--       `COMMANDS` -> `IDCOMMMAND`
--

--
-- Disparadores `COMMAND_PROGRAM`
--
DROP TRIGGER IF EXISTS `checkPOS_natural`;
DELIMITER //
CREATE TRIGGER `checkPOS_natural` BEFORE INSERT ON `COMMAND_PROGRAM`
 FOR EACH ROW BEGIN
  IF NEW.POS < 1 THEN
    SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT = 'POS must be natural';
  END IF;
END
//
DELIMITER ;

-- --------------------------------------------------------

--
-- Estructura Stand-in para la vista `countHitsVIEW`
--
DROP VIEW IF EXISTS `countHitsVIEW`;
CREATE TABLE IF NOT EXISTS `countHitsVIEW` (
`USERNAME` varchar(15)
,`FUNCTION` varchar(20)
,`TOTAL` bigint(21)
,`SUCCESS` decimal(23,0)
,`ERROR` decimal(23,0)
,`PASSWORD` decimal(23,0)
,`INTEGRITY` decimal(23,0)
);
-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `DEVICES`
--
-- Creación: 12-04-2014 a las 14:42:05
--

DROP TABLE IF EXISTS `DEVICES`;
CREATE TABLE IF NOT EXISTS `DEVICES` (
  `IDDEVICE` int(11) NOT NULL AUTO_INCREMENT,
  `IPADDRESS` varchar(20) DEFAULT NULL,
  `SERIAL` varchar(20) DEFAULT NULL,
  `NAME` varchar(20) DEFAULT NULL,
  `ENGLISH` varchar(500) DEFAULT NULL,
  `SPANISH` varchar(500) DEFAULT NULL,
  `DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `VERSION` int(11) NOT NULL,
  PRIMARY KEY (`IDDEVICE`),
  UNIQUE KEY `SERIAL` (`SERIAL`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=16 ;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `ERRORS`
--
-- Creación: 12-04-2014 a las 14:42:05
--

DROP TABLE IF EXISTS `ERRORS`;
CREATE TABLE IF NOT EXISTS `ERRORS` (
  `ERRORCODE` int(11) NOT NULL AUTO_INCREMENT,
  `ENGLISH` varchar(50) NOT NULL,
  `SPANISH` varchar(50) NOT NULL,
  PRIMARY KEY (`ERRORCODE`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=47 ;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `FUNCTIONS`
--
-- Creación: 12-04-2014 a las 14:42:06
--

DROP TABLE IF EXISTS `FUNCTIONS`;
CREATE TABLE IF NOT EXISTS `FUNCTIONS` (
  `FUNCT` int(11) NOT NULL AUTO_INCREMENT,
  `FUNCTION` varchar(20) NOT NULL,
  PRIMARY KEY (`FUNCT`),
  UNIQUE KEY `FUNCTION` (`FUNCTION`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=25 ;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `HISTORYACCESS`
--
-- Creación: 13-04-2014 a las 22:08:26
--

DROP TABLE IF EXISTS `HISTORYACCESS`;
CREATE TABLE IF NOT EXISTS `HISTORYACCESS` (
  `IDHISTORY` int(11) NOT NULL AUTO_INCREMENT,
  `IDUSER` int(11) DEFAULT NULL,
  `IDHOUSE` int(11) DEFAULT NULL,
  `ERROR` int(11) DEFAULT NULL,
  `FUNCT` int(11) DEFAULT NULL,
  `DATESTAMP` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`IDHISTORY`),
  KEY `ERROR` (`ERROR`),
  KEY `FUNCT` (`FUNCT`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=2729 ;

--
-- RELACIONES PARA LA TABLA `HISTORYACCESS`:
--   `IDHOUSE`
--       `HOUSES` -> `IDHOUSE`
--   `IDUSER`
--       `USERS` -> `IDUSER`
--   `ERROR`
--       `ERRORS` -> `ERRORCODE`
--   `FUNCT`
--       `FUNCTIONS` -> `FUNCT`
--

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `HISTORYACTION`
--
-- Creación: 12-04-2014 a las 14:42:06
--

DROP TABLE IF EXISTS `HISTORYACTION`;
CREATE TABLE IF NOT EXISTS `HISTORYACTION` (
  `IDHISTORYACTION` int(11) NOT NULL AUTO_INCREMENT,
  `IDACTION` int(11) NOT NULL,
  `IDPROGRAM` int(11) DEFAULT NULL,
  `IDUSER` int(11) DEFAULT NULL,
  `RETURNCODE` varchar(20) NOT NULL,
  `DATESTAMP` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`IDHISTORYACTION`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=225 ;

--
-- RELACIONES PARA LA TABLA `HISTORYACTION`:
--   `IDACTION`
--       `ACTIONS` -> `IDACTION`
--   `IDUSER`
--       `USERS` -> `IDUSER`
--

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `HOUSES`
--
-- Creación: 13-04-2014 a las 21:47:04
--

DROP TABLE IF EXISTS `HOUSES`;
CREATE TABLE IF NOT EXISTS `HOUSES` (
  `IDHOUSE` int(11) NOT NULL AUTO_INCREMENT,
  `IDUSER` int(11) NOT NULL,
  `HOUSENAME` varchar(30) NOT NULL,
  `IDIMAGE` int(11) DEFAULT NULL,
  `CITY` varchar(30) NOT NULL,
  `COUNTRY` varchar(30) NOT NULL,
  `GPS` varchar(10) DEFAULT NULL,
  `DATEBEGIN` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`IDHOUSE`),
  UNIQUE KEY `HOUSENAME` (`HOUSENAME`),
  KEY `IDIMAGE` (`IDIMAGE`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=23 ;

--
-- RELACIONES PARA LA TABLA `HOUSES`:
--   `IDUSER`
--       `USERS` -> `IDUSER`
--   `IDIMAGE`
--       `IMAGES` -> `IDIMAGE`
--

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `IMAGES`
--
-- Creación: 13-04-2014 a las 12:37:44
--

DROP TABLE IF EXISTS `IMAGES`;
CREATE TABLE IF NOT EXISTS `IMAGES` (
  `IDIMAGE` int(11) NOT NULL AUTO_INCREMENT,
  `IMAGE` mediumblob NOT NULL,
  `URL` varchar(200) DEFAULT NULL,
  `TYPE` varchar(30) NOT NULL,
  PRIMARY KEY (`IDIMAGE`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=11 ;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `IRCODES`
--
-- Creación: 12-04-2014 a las 14:42:06
--

DROP TABLE IF EXISTS `IRCODES`;
CREATE TABLE IF NOT EXISTS `IRCODES` (
  `IDCODE` int(11) NOT NULL AUTO_INCREMENT,
  `TYPE` varchar(20) NOT NULL,
  `POWER` int(11) DEFAULT NULL,
  `SETUP` int(11) DEFAULT NULL,
  `MUTE` int(11) DEFAULT NULL,
  `FUNCTION` int(11) DEFAULT NULL,
  `UNO` int(11) DEFAULT NULL,
  `DOS` int(11) DEFAULT NULL,
  `TRES` int(11) DEFAULT NULL,
  `CUATRO` int(11) DEFAULT NULL,
  `CINCO` int(11) DEFAULT NULL,
  `SEIS` int(11) DEFAULT NULL,
  `SIETE` int(11) DEFAULT NULL,
  `OCHO` int(11) DEFAULT NULL,
  `NUEVE` int(11) DEFAULT NULL,
  `CERO` int(11) DEFAULT NULL,
  `FAV` int(11) DEFAULT NULL,
  `UP` int(11) DEFAULT NULL,
  `LEFT` int(11) DEFAULT NULL,
  `PLAY` int(11) DEFAULT NULL,
  `RIGHT` int(11) DEFAULT NULL,
  PRIMARY KEY (`IDCODE`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=2 ;

-- --------------------------------------------------------

--
-- Estructura Stand-in para la vista `loginVIEW`
--
DROP VIEW IF EXISTS `loginVIEW`;
CREATE TABLE IF NOT EXISTS `loginVIEW` (
`IDUSER` int(11)
,`USERNAME` varchar(15)
,`IDHOUSE` int(11)
,`HOUSENAME` varchar(30)
,`IDROOM` int(11)
,`ROOMNAME` varchar(10)
,`IDSERVICE` int(11)
,`SERVICENAME` varchar(20)
,`IDACTION` int(11)
,`ACTIONNAME` varchar(10)
,`ACCESSNUMBER` int(11)
,`PERMISSIONNUMBER` int(11)
,`IDDEVICE` int(11)
,`IPADDRESS` varchar(20)
);
-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `PERMISSIONS`
--
-- Creación: 12-04-2014 a las 14:42:08
--

DROP TABLE IF EXISTS `PERMISSIONS`;
CREATE TABLE IF NOT EXISTS `PERMISSIONS` (
  `IDUSER` int(11) NOT NULL DEFAULT '0',
  `IDSERVICE` int(11) NOT NULL,
  `PERMISSIONNUMBER` int(11) NOT NULL,
  `DATEBEGIN` date DEFAULT NULL,
  PRIMARY KEY (`IDUSER`,`IDSERVICE`),
  KEY `IDSERVICE` (`IDSERVICE`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- RELACIONES PARA LA TABLA `PERMISSIONS`:
--   `IDSERVICE`
--       `SERVICES` -> `IDSERVICE`
--   `IDUSER`
--       `USERS` -> `IDUSER`
--

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `PROGRAMACTIONS`
--
-- Creación: 12-04-2014 a las 14:42:06
--

DROP TABLE IF EXISTS `PROGRAMACTIONS`;
CREATE TABLE IF NOT EXISTS `PROGRAMACTIONS` (
  `IDPROGRAM` int(11) NOT NULL AUTO_INCREMENT,
  `IDUSER` int(11) NOT NULL,
  `IDACTION` int(11) NOT NULL,
  `DATA` varchar(30) DEFAULT NULL,
  `STARTTIME` timestamp NULL DEFAULT NULL,
  `DATEBEGIN` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`IDPROGRAM`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=58 ;

--
-- RELACIONES PARA LA TABLA `PROGRAMACTIONS`:
--   `IDACTION`
--       `ACTIONS` -> `IDACTION`
--   `IDUSER`
--       `USERS` -> `IDUSER`
--

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `ROOMS`
--
-- Creación: 12-04-2014 a las 14:42:08
--

DROP TABLE IF EXISTS `ROOMS`;
CREATE TABLE IF NOT EXISTS `ROOMS` (
  `IDROOM` int(11) NOT NULL AUTO_INCREMENT,
  `IDHOUSE` int(11) DEFAULT NULL,
  `IDUSER` int(11) DEFAULT NULL,
  `ROOMNAME` varchar(10) NOT NULL,
  `DATEBEGIN` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`IDROOM`),
  UNIQUE KEY `ROOMNAME` (`ROOMNAME`,`IDHOUSE`),
  KEY `IDHOUSE` (`IDHOUSE`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=22 ;

--
-- RELACIONES PARA LA TABLA `ROOMS`:
--   `IDUSER`
--       `USERS` -> `IDUSER`
--   `IDHOUSE`
--       `HOUSES` -> `IDHOUSE`
--

-- --------------------------------------------------------

--
-- Estructura Stand-in para la vista `scheduleVIEW`
--
DROP VIEW IF EXISTS `scheduleVIEW`;
CREATE TABLE IF NOT EXISTS `scheduleVIEW` (
`IDTASK` int(11)
,`TASKNAME` varchar(15)
,`IDPROGRAM` int(11)
,`IDACTION` int(11)
,`IDHOUSE` int(11)
,`HOUSENAME` varchar(30)
,`IDROOM` int(11)
,`ROOMNAME` varchar(10)
,`IDSERVICE` int(11)
,`SERVICENAME` varchar(20)
);
-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `SERVICES`
--
-- Creación: 12-04-2014 a las 14:42:09
--

DROP TABLE IF EXISTS `SERVICES`;
CREATE TABLE IF NOT EXISTS `SERVICES` (
  `IDSERVICE` int(11) NOT NULL AUTO_INCREMENT,
  `IDROOM` int(11) DEFAULT NULL,
  `IDDEVICE` int(11) DEFAULT NULL,
  `SERVICENAME` varchar(20) NOT NULL,
  `SERVICEINTERFACE` int(11) NOT NULL,
  `FCODE` int(11) DEFAULT NULL,
  `ENGLISH` varchar(50) DEFAULT NULL,
  `SPANISH` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`IDSERVICE`),
  UNIQUE KEY `UNQ_IDROOM_IDDEVICE_SERVICENAME` (`IDROOM`,`IDDEVICE`,`SERVICENAME`),
  KEY `IDDEVICE` (`IDDEVICE`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=61 ;

--
-- RELACIONES PARA LA TABLA `SERVICES`:
--   `IDROOM`
--       `ROOMS` -> `IDROOM`
--   `IDDEVICE`
--       `DEVICES` -> `IDDEVICE`
--

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `SOFTWARE`
--
-- Creación: 12-04-2014 a las 14:42:06
--

DROP TABLE IF EXISTS `SOFTWARE`;
CREATE TABLE IF NOT EXISTS `SOFTWARE` (
  `DEVICE` int(11) NOT NULL,
  `VERSION` int(11) NOT NULL,
  `PACKAGE` varchar(1000) NOT NULL,
  UNIQUE KEY `DEVICE` (`DEVICE`,`VERSION`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `STADISTICS`
--
-- Creación: 12-04-2014 a las 14:42:06
--

DROP TABLE IF EXISTS `STADISTICS`;
CREATE TABLE IF NOT EXISTS `STADISTICS` (
  `Y` bigint(21) NOT NULL DEFAULT '0',
  `X` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `TASKPROGRAM`
--
-- Creación: 12-04-2014 a las 14:42:09
--

DROP TABLE IF EXISTS `TASKPROGRAM`;
CREATE TABLE IF NOT EXISTS `TASKPROGRAM` (
  `IDTASK` int(11) NOT NULL,
  `IDPROGRAM` int(11) NOT NULL,
  UNIQUE KEY `1_ACTION_1_TASK` (`IDTASK`,`IDPROGRAM`),
  KEY `IDPROGRAM` (`IDPROGRAM`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- RELACIONES PARA LA TABLA `TASKPROGRAM`:
--   `IDPROGRAM`
--       `PROGRAMACTIONS` -> `IDPROGRAM`
--   `IDTASK`
--       `TASKS` -> `IDTASK`
--

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `TASKS`
--
-- Creación: 12-04-2014 a las 14:42:09
--

DROP TABLE IF EXISTS `TASKS`;
CREATE TABLE IF NOT EXISTS `TASKS` (
  `IDTASK` int(11) NOT NULL AUTO_INCREMENT,
  `TASKNAME` varchar(15) NOT NULL,
  `IDUSER` int(11) DEFAULT NULL,
  `DESCRIPTION` varchar(50) DEFAULT NULL,
  ` FREQUENCY` timestamp NULL DEFAULT NULL,
  `DATEBEGIN` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`IDTASK`),
  KEY `IDUSER` (`IDUSER`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=21 ;

--
-- RELACIONES PARA LA TABLA `TASKS`:
--   `IDUSER`
--       `USERS` -> `IDUSER`
--

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `USERS`
--
-- Creación: 12-04-2014 a las 14:42:06
--

DROP TABLE IF EXISTS `USERS`;
CREATE TABLE IF NOT EXISTS `USERS` (
  `IDUSER` int(11) NOT NULL AUTO_INCREMENT,
  `USERNAME` varchar(15) NOT NULL,
  `PASSWORD` varchar(40) NOT NULL,
  `EMAIL` varchar(40) NOT NULL,
  `HINT` varchar(30) DEFAULT NULL,
  `DATEBEGIN` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`IDUSER`),
  UNIQUE KEY `USERNAME` (`USERNAME`),
  UNIQUE KEY `EMAIL` (`EMAIL`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=87 ;

-- --------------------------------------------------------

--
-- Estructura para la vista `countHitsVIEW`
--
DROP TABLE IF EXISTS `countHitsVIEW`;

CREATE ALGORITHM=UNDEFINED DEFINER=`alex`@`localhost` SQL SECURITY DEFINER VIEW `countHitsVIEW` AS select `USERS`.`USERNAME` AS `USERNAME`,`FUNCTIONS`.`FUNCTION` AS `FUNCTION`,count(0) AS `TOTAL`,sum(if((`HISTORYACCESS`.`ERROR` = 0),1,0)) AS `SUCCESS`,sum(if((`HISTORYACCESS`.`ERROR` <> 0),1,0)) AS `ERROR`,sum(if((`HISTORYACCESS`.`ERROR` = 2),1,0)) AS `PASSWORD`,sum(if((`HISTORYACCESS`.`ERROR` = 4),1,0)) AS `INTEGRITY` from (((`USERS` left join `HISTORYACCESS` on((`USERS`.`IDUSER` = `HISTORYACCESS`.`IDUSER`))) left join `FUNCTIONS` on((`HISTORYACCESS`.`FUNCT` = `FUNCTIONS`.`FUNCT`))) join `ERRORS` on((`ERRORS`.`ERRORCODE` = `HISTORYACCESS`.`ERROR`))) group by `USERS`.`USERNAME`,`FUNCTIONS`.`FUNCTION` order by count(0) desc;

-- --------------------------------------------------------

--
-- Estructura para la vista `loginVIEW`
--
DROP TABLE IF EXISTS `loginVIEW`;

CREATE ALGORITHM=UNDEFINED DEFINER=`alex`@`localhost` SQL SECURITY DEFINER VIEW `loginVIEW` AS select `USERS`.`IDUSER` AS `IDUSER`,`USERS`.`USERNAME` AS `USERNAME`,`HOUSES`.`IDHOUSE` AS `IDHOUSE`,`HOUSES`.`HOUSENAME` AS `HOUSENAME`,`ROOMS`.`IDROOM` AS `IDROOM`,`ROOMS`.`ROOMNAME` AS `ROOMNAME`,`SERVICES`.`IDSERVICE` AS `IDSERVICE`,`SERVICES`.`SERVICENAME` AS `SERVICENAME`,`ACTIONS`.`IDACTION` AS `IDACTION`,`ACTIONS`.`ACTIONNAME` AS `ACTIONNAME`,`ACCESSHOUSE`.`ACCESSNUMBER` AS `ACCESSNUMBER`,`PERMISSIONS`.`PERMISSIONNUMBER` AS `PERMISSIONNUMBER`,`DEVICES`.`IDDEVICE` AS `IDDEVICE`,`DEVICES`.`IPADDRESS` AS `IPADDRESS` from (((((((`USERS` left join `ACCESSHOUSE` on((`USERS`.`IDUSER` = `ACCESSHOUSE`.`IDUSER`))) left join `HOUSES` on((`ACCESSHOUSE`.`IDHOUSE` = `HOUSES`.`IDHOUSE`))) left join `ROOMS` on((`ACCESSHOUSE`.`IDHOUSE` = `ROOMS`.`IDHOUSE`))) left join `SERVICES` on((`ROOMS`.`IDROOM` = `SERVICES`.`IDROOM`))) left join `DEVICES` on((`SERVICES`.`IDDEVICE` = `DEVICES`.`IDDEVICE`))) left join `ACTIONS` on((`SERVICES`.`IDSERVICE` = `ACTIONS`.`IDSERVICE`))) left join `PERMISSIONS` on(((`PERMISSIONS`.`IDUSER` = `USERS`.`IDUSER`) and (`PERMISSIONS`.`IDSERVICE` = `SERVICES`.`IDSERVICE`)))) where 1 order by `USERS`.`USERNAME`,`HOUSES`.`HOUSENAME`,`ROOMS`.`ROOMNAME`,`SERVICES`.`SERVICENAME`,`ACTIONS`.`ACTIONNAME` desc;

-- --------------------------------------------------------

--
-- Estructura para la vista `scheduleVIEW`
--
DROP TABLE IF EXISTS `scheduleVIEW`;

CREATE ALGORITHM=UNDEFINED DEFINER=`alex`@`localhost` SQL SECURITY DEFINER VIEW `scheduleVIEW` AS select `TASKS`.`IDTASK` AS `IDTASK`,`TASKS`.`TASKNAME` AS `TASKNAME`,`PROGRAMACTIONS`.`IDPROGRAM` AS `IDPROGRAM`,`PROGRAMACTIONS`.`IDACTION` AS `IDACTION`,`HOUSES`.`IDHOUSE` AS `IDHOUSE`,`HOUSES`.`HOUSENAME` AS `HOUSENAME`,`ROOMS`.`IDROOM` AS `IDROOM`,`ROOMS`.`ROOMNAME` AS `ROOMNAME`,`SERVICES`.`IDSERVICE` AS `IDSERVICE`,`SERVICES`.`SERVICENAME` AS `SERVICENAME` from (`ACTIONS` join ((((`PROGRAMACTIONS` left join (`TASKPROGRAM` join `TASKS`) on(((`TASKPROGRAM`.`IDPROGRAM` = `PROGRAMACTIONS`.`IDPROGRAM`) and (`TASKPROGRAM`.`IDTASK` = `TASKS`.`IDTASK`)))) join `SERVICES`) join `ROOMS` on((`ROOMS`.`IDROOM` = `SERVICES`.`IDROOM`))) join `HOUSES` on((`HOUSES`.`IDHOUSE` = `ROOMS`.`IDHOUSE`)))) where ((`ACTIONS`.`IDACTION` = `PROGRAMACTIONS`.`IDACTION`) and (`SERVICES`.`IDSERVICE` = `ACTIONS`.`IDSERVICE`)) order by `TASKS`.`TASKNAME` desc,`PROGRAMACTIONS`.`IDPROGRAM`;

--
-- Restricciones para tablas volcadas
--

--
-- Filtros para la tabla `ACCESSHOUSE`
--
ALTER TABLE `ACCESSHOUSE`
  ADD CONSTRAINT `ACCESSHOUSE_ibfk_4` FOREIGN KEY (`IDHOUSE`) REFERENCES `HOUSES` (`IDHOUSE`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `ACCESSHOUSE_ibfk_3` FOREIGN KEY (`IDUSER`) REFERENCES `USERS` (`IDUSER`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Filtros para la tabla `ACTIONMESSAGES`
--
ALTER TABLE `ACTIONMESSAGES`
  ADD CONSTRAINT `ACTIONMESSAGES_ibfk_2` FOREIGN KEY (`IDACTION`) REFERENCES `ACTIONS` (`IDACTION`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Filtros para la tabla `ACTIONS`
--
ALTER TABLE `ACTIONS`
  ADD CONSTRAINT `ACTIONS_ibfk_2` FOREIGN KEY (`IDSERVICE`) REFERENCES `SERVICES` (`IDSERVICE`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Filtros para la tabla `COMMANDS`
--
ALTER TABLE `COMMANDS`
  ADD CONSTRAINT `COMMANDS_ibfk_1` FOREIGN KEY (`IDUSER`) REFERENCES `USERS` (`IDUSER`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Filtros para la tabla `COMMAND_PROGRAM`
--
ALTER TABLE `COMMAND_PROGRAM`
  ADD CONSTRAINT `COMMAND_PROGRAM_ibfk_2` FOREIGN KEY (`IDPROGRAM`) REFERENCES `PROGRAMACTIONS` (`IDPROGRAM`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `COMMAND_PROGRAM_ibfk_1` FOREIGN KEY (`IDCOMMAND`) REFERENCES `COMMANDS` (`IDCOMMMAND`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Filtros para la tabla `HISTORYACCESS`
--
ALTER TABLE `HISTORYACCESS`
  ADD CONSTRAINT `HISTORYACCESS_ibfk_3` FOREIGN KEY (`ERROR`) REFERENCES `ERRORS` (`ERRORCODE`),
  ADD CONSTRAINT `HISTORYACCESS_ibfk_4` FOREIGN KEY (`FUNCT`) REFERENCES `FUNCTIONS` (`FUNCT`);

--
-- Filtros para la tabla `HOUSES`
--
ALTER TABLE `HOUSES`
  ADD CONSTRAINT `HOUSES_ibfk_1` FOREIGN KEY (`IDIMAGE`) REFERENCES `IMAGES` (`IDIMAGE`) ON DELETE SET NULL ON UPDATE SET NULL;

--
-- Filtros para la tabla `PERMISSIONS`
--
ALTER TABLE `PERMISSIONS`
  ADD CONSTRAINT `PERMISSIONS_ibfk_4` FOREIGN KEY (`IDSERVICE`) REFERENCES `SERVICES` (`IDSERVICE`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `PERMISSIONS_ibfk_3` FOREIGN KEY (`IDUSER`) REFERENCES `USERS` (`IDUSER`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Filtros para la tabla `ROOMS`
--
ALTER TABLE `ROOMS`
  ADD CONSTRAINT `ROOMS_ibfk_2` FOREIGN KEY (`IDHOUSE`) REFERENCES `HOUSES` (`IDHOUSE`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Filtros para la tabla `SERVICES`
--
ALTER TABLE `SERVICES`
  ADD CONSTRAINT `SERVICES_ibfk_3` FOREIGN KEY (`IDROOM`) REFERENCES `ROOMS` (`IDROOM`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `SERVICES_ibfk_4` FOREIGN KEY (`IDDEVICE`) REFERENCES `DEVICES` (`IDDEVICE`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Filtros para la tabla `TASKPROGRAM`
--
ALTER TABLE `TASKPROGRAM`
  ADD CONSTRAINT `TASKPROGRAM_ibfk_4` FOREIGN KEY (`IDPROGRAM`) REFERENCES `PROGRAMACTIONS` (`IDPROGRAM`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `TASKPROGRAM_ibfk_3` FOREIGN KEY (`IDTASK`) REFERENCES `TASKS` (`IDTASK`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Filtros para la tabla `TASKS`
--
ALTER TABLE `TASKS`
  ADD CONSTRAINT `TASKS_ibfk_2` FOREIGN KEY (`IDUSER`) REFERENCES `USERS` (`IDUSER`) ON DELETE CASCADE ON UPDATE CASCADE;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
